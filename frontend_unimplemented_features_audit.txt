Frontend Feature Audit - Unimplemented / Non-Functional / Partial Items
=====================================================================

Generated: 2025-09-25
Scope: Entire React client under `client/src`.

1. Implemented (Baseline + New)
- Auth routing with `RequireAuth` for /home and /profile/:userId.
- Post creation: text + media (multi-image/video up to 5) + audio recording (voice message) + GIF URL embedding + external video URL embedding.
- Multi-media persistence via `mediaPaths` with migration fallback (legacy `picturePath`).
- Audio recording (MediaRecorder + waveform) and playback.
- Feed/profile post rendering with like & comment functionality.
- Share action (progressive: Web Share → clipboard → textarea fallback) with Snackbar feedback.
- Comment editing & deletion (inline edit, delete, edited indicator).
- GIF rendering inside comments (first GIF auto displayed as <img>).
- Object URL revocation for media previews.
- Relative time utilities (timeAgo/objectId) and theme switching logic via Redux `mode` (no visible toggle UI).
 - Object URL revocation for media previews.
 - Relative time utilities (timeAgo/objectId) and theme switching logic via Redux `mode` (no visible toggle UI).
 - Snackbar error handling for like/comment/comment edit/delete & like failures (Quick Win B).
 - Simple lightbox modal for images/videos with keyboard nav (Quick Win C).
 - Location & occupation editing via profile dialog (Feature 6).
 - Real-time feed baseline via SSE (new posts, likes, comments update live).

2. Unimplemented / Non-Functional / Partial Features
1. Share action (PARTIAL)
   - UI: `ShareOutlined` icon shown per post.
   - No onClick handler, no share dialog/copy link logic. Purely decorative.
2. Comment editing/deletion (DONE)
   - Cannot edit or delete existing comments. Only append new.
3. Multiple media per post (DONE)
   - Only one file allowed (image OR video OR audio). No gallery/carousel support.
4. GIF rendering inside comments
   - GIF URLs can be inserted, but comment renderer does not convert them to <img>; likely displayed as plain text.
5. Removing detected embeds
   - Auto video/GIF detection in post text has no explicit UI to remove aside from manually deleting URL.
6. Location editing (DONE)
    - Implemented profile dialog (UserWidget) to update location & occupation; persists to backend and Redux.
7. Profile page depth (PARTIAL)
   - No avatar/bio edit or explicit friend management actions observed (friend widget code not included in scan).
8. Robust Giphy error/loading states (IMPLEMENTED)
    - Added: debounced search w/ abort, skeleton loaders, explicit error messaging + retry, graceful empty state, manual reload, keyboard '/' focus shortcut, lazy image loading & hover affordances. Still could add rate limiting/backoff (future).
9. Accessibility gaps (NOT A PRIORITY)
   - Icon-only buttons (like/share/GIF/audio) lack aria-labels.
   - Waveform canvas lacks accessible alternative.
10. Audio enhancements
    - No pause/resume, trimming, duration metadata display, or re-record confirmation.
11. Feedback on actions (PARTIAL)
    - Snackbar error surfaced for like/comment/add/edit/delete and comment load; remaining: global provider & retry/optimistic patterns.
12. Input validation UX (IMPLEMENTED - POST & COMMENT LIMITS)
    - Added live character counters & soft limits (post: 500 chars, comment: 300 chars) with color thresholds (85% warn, >100% error) and disabled submission when exceeded.
    - Future: externalize limits to config/env and add remaining field-specific validations (e.g., social links, role length).
13. Shareable deep links
    - No dedicated `/post/:id` route; cannot open a single post in isolation.
14. Draft persistence (IMPLEMENTED - TEXT + META)
    - Post composer now saves draft (text + media file names + audio presence flag) to localStorage per user with debounce (400ms).
    - Restores on mount (single restore notification). Clear Draft option added.
    - Not persisting binary data (media/audio) to avoid storage bloat; future enhancement could inline small base64.
15. Media labeling
    - Audio posts labeled generically ("Voice message"); no duration length surface.
16. Theme toggle UI
    - Theme infrastructure present; no visible toggle control.
17. Friend add/remove
    - Not verified in scanned code; if absent, friend list is read-only.
18. Real-time updates (PARTIAL)
        Implemented:
            - Server-Sent Events (SSE) endpoint `/realtime` established.
            - Broadcast events: post:new, post:like, comment:add, comment:edit, comment:delete.
            - Client auto-subscribes after auth; Redux updates feed live (new post prepend, like/comment mutations merged).
        Remaining / Potential Improvements:
            a. Reconnect backoff & exponential retry (currently relies on EventSource implicit behavior / effect remount).
            b. Heartbeat/ping interval (keep-alive for aggressive proxies; currently only initial ping).
            c. Selective subscription / channel filtering (e.g., only friends' posts, or only visible post IDs).
            d. Fallback to polling when EventSource unsupported or repeatedly failing.
            e. Presence & typing indicators (would require additional event types + ephemeral state store).
            f. Support post deletion / moderation events.
            g. Batch events (coalesce rapid like/comment bursts to reduce re-renders).
            h. Upgrade path to WebSocket for bidirectional features (back-pressure, acknowledgements, presence updates).
            i. Client-side dedupe / version checks (ignore stale events if out-of-order delivery happens).
            j. Metrics & monitoring (count active connections, log disconnect reasons, alert on abnormal churn).
19. Error boundaries
    - No <ErrorBoundary>; iframe/media errors could cascade.
20. Test coverage
    - Core components (MyPostWidget/PostWidget/GiphyPicker/audio controls) untested. Only utility + trivial App test present.
21. Service worker/PWA
    - No offline caching or install prompt despite share icon presence.
22. Embed sanitization
    - Direct iframe/video creation from extracted URLs; limited sanitization -> potential XSS vector if helpers insufficient.
23. Media compatibility
    - Raw WEBM audio may have Safari compatibility issues (no fallback or transcoding).
24. Loading states
    - Minimal ("Loading comments..."). No skeleton loaders.
25. Pagination/infinite scroll
    - Full feed loads in one request; no lazy load or page slicing.

26. Engagement metrics: Real profile views & post impressions (NOT IMPLEMENTED)
     Current state:
        - Fields `viewedProfile` and `impressions` on User/Post are placeholder/randomized (seed) values, not tied to real user behavior.
     Goal:
        - Accurately track: (a) unique (and total) profile views per user, (b) unique (and total) impressions per post.
        - Optional visibility of recent viewers (privacy-aware) and basic analytics (e.g., top posts by reach).
     Backend Plan:
        1. Data Model Changes:
            - User: replace/rename `viewedProfile` -> `profileViewsTotal` (numeric) and add `profileViewsUnique` (numeric) OR adopt an embedded aggregation doc.
            - Post: keep `impressions` but clarify semantics; add `impressionsUnique` (numeric).
            - New Collections:
                a. `ProfileView` { _id, profileUserId, viewerUserId, ts(Date) }
                b. `PostImpression` { _id, postId, viewerUserId, ts(Date) }
            - (Optional) TTL Index for raw events (e.g., expire after 30–90 days) while keeping aggregated counters on User/Post.
        2. Write Path (Profile View):
            - When frontend loads a profile page (not self), send POST /analytics/profile-view { profileUserId } (token-authenticated).
            - Backend logic:
                 * Ignore if profileUserId === req.user.id.
                 * Upsert (or insert) a lightweight event row (can skip duplicates within a time window by checking for existing viewerUserId+profileUserId where ts > now-6h).
                 * If first event for viewer in window: increment User.profileViewsTotal (+1) and potentially unique count if no previous ANY record exists (lookup by viewerUserId+profileUserId ignoring time window) using an existence check or a separate unique index.
        3. Write Path (Post Impression):
            - Frontend batches visible post IDs (debounced intersection observer) and POST /analytics/post-impressions { postIds: [] }.
            - Backend processes each:
                 * For each postId create event if (no event in last 2 min for same user/post) to avoid scroll jitter inflation.
                 * Always increment Post.impressions (raw total) with $inc.
                 * Only increment Post.impressionsUnique the first time ever for that userId/postId pair.
                 * Consider Mongo bulkWrite for efficiency.
        4. De-duplication / Uniqueness Strategies:
            - Option A (Mongo only): Use findOne for existing event; if none, insert & increment unique.
            - Option B (Cache): Introduce an in-memory or Redis key: `pv:{profileUserId}:{viewerUserId}:{day}` and `pi:{postId}:{viewerUserId}:{hour}` to short-circuit DB writes for repeats.
        5. Privacy & Security:
            - Viewer list (recent 5–10) only if profile owner toggles a setting (future `settings.showViewers`).
            - Do not expose full historical list directly; provide aggregated stats endpoint: /analytics/profile/:id/summary.
        6. Endpoints (proposed):
            - POST /analytics/profile-view
            - POST /analytics/post-impressions
            - GET  /analytics/profile/:id/summary -> { total, unique, recentViewers: [{userId, name, picturePath, ts}] }
            - GET  /analytics/post/:id/summary -> { impressions, unique, lastImpressionTs }
        7. Indexes:
            - ProfileView: index { profileUserId, viewerUserId, ts } (compound), and { profileUserId, ts } for aggregates.
            - PostImpression: index { postId, viewerUserId, ts } and { postId, ts }.
        8. Aggregation / Maintenance Jobs:
            - Nightly job (optional) to rebuild anomaly corrections or roll up daily unique counts for archival.
        9. Migration:
            - For existing data with placeholder values, reset counters to 0 unless preserving seed needed.
     Frontend Plan:
        1. Profile Page:
            - On mount (useEffect) trigger fire-and-forget fetch to POST /analytics/profile-view.
            - Display counters from user object (after refresh) or via lazy GET summary.
            - If viewer list allowed, show avatar chips with tooltip time (format via timeAgo).
        2. Feed & Post Components:
            - Use IntersectionObserver to track when a post crosses a visibility threshold (e.g., 50% viewport for >300ms) and batch postIds.
            - Debounce (e.g., every 1–2s) sending the batch to /analytics/post-impressions.
            - Update local Redux state for the post impression count optimistically (+1 if first local view this session).
        3. Performance:
            - Maintain a Set in memory per session for seenPostIds to avoid redundant network spam.
            - Hard cap per batch (e.g., 50 IDs) and flush on unmount.
        4. UI/UX Considerations:
            - Show compact "Impressions: X" near like/comment row (toggleable via settings).
            - Provide hover tooltip clarifying definition ("Unique viewers vs total views").
        5. Error Handling:
            - Silently ignore analytics endpoint failures (non-critical) but log to console (dev) or send to future monitoring endpoint.
     Edge Cases:
        - Self views excluded.
        - Non-authenticated guests (if later allowed) either ignored or tracked as anonymous bucket.
        - Rapid scroll thrash: mitigated by time window & intersection threshold.
        - Bot/script inflation: future heuristic (rate per user, user-agent filtering).
     Incremental Delivery Strategy:
        Phase 1: Simple counters (POST on mount & visible posts) w/out uniqueness.
        Phase 2: Unique detection & batching.
        Phase 3: Viewer list + privacy toggle.
        Phase 4: Analytics summaries & dashboard.
     Risks & Mitigations:
        - High write volume -> batch & cache.
        - Privacy concerns -> explicit setting to expose viewers.
        - Data bloat -> TTL + aggregation roll-ups.
     Success Criteria:
        - <50ms added latency per batch call (server side).
        - Accurate ±1 against manual test scenarios for uniqueness.
        - No more than 1 analytics request per 2s during normal scroll.

3. Potential Dead / Underutilized Code (Updated)
- Mobile overflow `MoreHorizOutlined` without expanded menu actions.
- GIF/video extraction limited to first occurrence; multiple GIFs ignored.
- Legacy `picturePath` usage paths now duplicative of `mediaPaths` (cleanup later).

4. Security / Resilience Gaps (Unaddressed Features)
- No rate limiting/spam deterrent (client-side throttling).
- No CSRF defense beyond bearer token (acceptable for SPA, note only).
- No rich error logging or central error boundary.
- External embed allowances depend on helper; need whitelist review.

5. Quick Win Recommendations (Updated)
A. Add missing aria-labels + waveform alt description.
D. Replace all alert() calls with unified Snackbar/toast. (B & C done)
E. Add skeleton loaders for posts & comments.
F. Optimistic comment update & rollback pattern.
G. Configurable MAX_MEDIA_FILES via env & enforce on server.
H. Tooltip with edited timestamp for edited comments.
I. Add explicit remove-embed button when auto-detected media is present.
J. Introduce ErrorBoundary component.
 K. SSE heartbeat & reconnect backoff (convert 18.a & 18.b into short-term actionable items).
 L. Polling fallback for SSE failures (18.d).
 M. Batch/coalesce rapid SSE events (18.g) to reduce render thrash.

6. Medium-Term Improvements (Revised)
1. Pagination or infinite scroll & virtualization.
2. Theme toggle control + persisted preference.
3. Centralized embed/media parsing & sanitization service.
4. Dedicated single-post page with SEO-friendly metadata.
5. Comment edit/delete enhancements (history, soft delete, undo).
6. Media carousel/lightbox with swipe & keyboard controls.
7. Upload progress & cancellation.
8. Rate limiting UI & server sync.
9. Config-driven UI/media limits.
10. Enhanced accessibility (focus outlines, skip links, ARIA roles review).
 11. Presence & typing indicators over upgraded real-time channel (18.e / 18.h).
 12. Selective real-time channels & per-user/topic subscriptions (18.c).
 13. Real-time metrics dashboard & monitoring hooks (18.j).

7. Longer-Term Enhancements (Expanded)
1. Real-time updates (WebSocket/SSE) incl. presence & typing.
2. Cloud media storage + CDN + presigned direct uploads.
3. Advanced media processing (thumbnails, transcoding pipeline, waveform snapshot persistence).
4. Offline/PWA (cache strategies, background sync, notifications).
5. Audio normalization & transcoding (multi-codec packaging).
6. CSP & security hardening (iframe sandbox, URL allowlist service).
7. Observability: client perf metrics & error aggregation dashboard.
8. Analytics-driven feed ranking or personalization.
9. Internationalization & localization.
10. Theming presets, user-custom themes & font scaling.

8. No Evidence of Over-Engineering
- Added audio feature is self-contained.
- Mocks in `setupTests.js` are minimal and necessary for environment simulation.
- No excessive abstraction layers introduced.

9. Summary Table (Condensed)
| Area | Status |
|------|--------|
| Share | Non-functional |
| Comment edit/delete | Missing |
| Multi-media posts | Missing |
| GIF in comments display | Partial |
| Location editing | Implemented |
| Theme toggle UI | Missing |
| Pagination | Missing |
| Real-time updates | Missing |
| Error feedback (like/comment) | Partial |
| Single post deep link | Missing |
| Accessibility polish | Partial |
| Test coverage (core UI) | Low |
| Embed sanitization hardening | Needs review |

10. Next Steps (If You Want Action)
Reply with the letters of items you’d like implemented first (e.g., "A, B, D" for Share, GIF rendering in comments, and object URL cleanup) and I can proceed directly.

-- End of Report --
