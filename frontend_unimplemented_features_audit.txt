# MERN Social - Frontend Feature Audit

## Status Overview

**Last Updated**: October 20, 2025  
**Scope**: Entire React client under `client/src`

---

## 1. Feature Implementation Status

### Core Features - Fully Implemented ✅

| Feature | Status | Notes |
|---------|:------:|-------|
| Auth routing | ✅ | `RequireAuth` wrapper for protected routes |
| Login/Register | ✅ | Basic authentication with JWT |
| Post creation (text) | ✅ | Text posting with character limits |
| Media upload | ✅ | Image, video, GIF support |
| Audio recording | ✅ | MediaRecorder with waveform visualization |
| GIF embedding | ✅ | Giphy integration with search & preview |
| Comment system | ✅ | Adding, editing, and deleting comments |
| Like functionality | ✅ | Post and comment likes with counter |
| Feed rendering | ✅ | Timeline of posts with media support |
| GIF in comments | ✅ | Giphy URLs auto-display as inline images |
| Theme toggle | ✅ | Light/dark mode with navbar button |
| Location editing | ✅ | Profile dialog for location/occupation |
| Draft persistence | ✅ | LocalStorage saving with clear option |
| Input validation | ✅ | Character counters with thresholds |
| Loading states | ✅ | Skeletons for feed, posts, and comments |
| Error boundaries | ✅ | Global boundary to prevent cascade failures |
| Embed sanitization | ✅ | YouTube/Vimeo with security restrictions |
| Error feedback | ✅ | Snackbars for action failures |
| Real-time updates | ✅ | SSE for new posts, likes, comments |

### Partially Implemented Features ⚠️

| Feature | Status | Current State | Needed Improvements |
|---------|:------:|---------------|---------------------|
| Share action | ⚠️ | UI exists but non-functional | Implement Web Share API → clipboard fallback |
| Multiple media | ⚠️ | Only one file per post | Add gallery/carousel support |
| Profile page | ⚠️ | Basic display | Add avatar/bio editing & friend management |
| Removing embeds | ⚠️ | Manual URL deletion only | Add explicit UI remove buttons |
| Media labeling | ⚠️ | Generic labels only | Add duration for audio, better descriptions |
| Friend management | ⚠️ | Display only | Add/remove functionality |
| Profile metrics | ⚠️ | Backend counters (Phase 1) | Client implementation & uniqueness |
| Test coverage | ⚠️ | Basic component tests | Expand test suite |
| Media compatibility | ⚠️ | WEBM audio format | Add transcoding for Safari |
| Accessibility | ⚠️ | Basic ARIA added | More comprehensive a11y support |
| SSE fallback | ⚠️ | Basic polling after failures | Adaptive interval & reconnection |

### Unimplemented Features ❌

| Feature | Priority | Description |
|---------|:--------:|-------------|
| Post deep links | HIGH | Dedicated `/post/:id` route for sharing |
| Service worker/PWA | MEDIUM | Offline support & installation |
| Pagination | HIGH | Infinite scroll or pagination controls |
| Remote error logging | MEDIUM | Client-side error tracking service |
| Rate limiting | MEDIUM | Client-side throttling for API calls |
| Media carousel | HIGH | Multiple media files per post |
| Audio enhancements | MEDIUM | Pause/resume, trimming, metadata |

---

## 2. Recent Improvements (Since September 2025)

1. ✅ **Error Handling**: Global ErrorBoundary to prevent cascade failures
2. ✅ **Accessibility**: ARIA labels for buttons and descriptive canvas labels
3. ✅ **Media Limits**: Configurable via environment variables with server enforcement
4. ✅ **Comment UX**: Tooltip showing edit timestamp for edited comments
5. ✅ **Embed Management**: Remove buttons for detected video/GIF embeds
6. ✅ **Real-time**: Heartbeat detection, exponential backoff, reconnection logic
7. ✅ **Loading States**: Skeleton loaders for initial content loading
8. ✅ **Optimistic Updates**: Comment add/edit/delete with failure rollback
9. ✅ **Analytics**: Backend counters for profile views and post impressions
10. ✅ **Event Batching**: 250ms coalescing window to reduce render thrash

---

## 3. Technical Improvement Opportunities

### Quick Wins (1-2 days)

1. **Share functionality**: Implement progressive Web Share API with clipboard fallback
2. **Post deep links**: Create dedicated post page route with sharing support
3. **Audio player enhancements**: Add pause/resume and duration display
4. **Mobile optimization**: Improve touch interactions and navigation

### Medium-Term Improvements (1-2 weeks)

1. **Pagination/Infinite scroll**: With virtualization for performance
2. **Image optimization pipeline**: Responsive images with compression
3. **Enhanced comment system**: History view and threaded replies
4. **Upload progress**: Add indicators and cancellation options
5. **Real-time enhancements**: Presence and typing indicators

### Longer-Term Projects (1+ months)

1. **Cloud media storage**: CDN integration and migration
2. **Offline support**: PWA capabilities with background sync
3. **Analytics dashboard**: Comprehensive metrics and insights
4. **Security hardening**: CSP and additional protection
5. **Group functionality**: Create and join groups with specific feeds

---

## 4. Code Cleanup Opportunities

1. **Mobile overflow menu**: `MoreHorizOutlined` without expanded actions
2. **Legacy media paths**: `picturePath` now duplicative of `mediaPaths`
3. **Error handling patterns**: Consolidate across components
4. **Media handling functions**: Standardize into shared utilities

---

## 5. Engagement Metrics Implementation Status

### Profile Views & Post Impressions (Phase 1 Complete)

- ✅ **Backend**: Counters added to User and Post models
- ✅ **API**: Analytics endpoints established
- ✅ **Basic validation**: JWT verification & self-view exclusion
- ✅ **Write optimization**: BulkWrite for impressions

### Future Phases Planned

- **Phase 2**: Uniqueness handling, session tracking, time-window suppression
- **Phase 3**: Viewer list with privacy controls, metrics breakdown
- **Phase 4**: Aggregated summaries and dashboards
- **Phase 5**: Monitoring and anomaly detection

---

## 6. Real-time Updates Implementation Status

### Current Implementation

- ✅ **SSE endpoint**: `/realtime` established
- ✅ **Event types**: post:new, post:like, comment:add/edit/delete
- ✅ **Client integration**: Auto-subscription after auth
- ✅ **Redux updates**: Live feed updates with mutations
- ✅ **Heartbeat**: Silence detection implemented
- ✅ **Reconnection**: Exponential backoff logic
- ✅ **Event batching**: 250ms coalescing window

### Planned Enhancements

- **Selective subscriptions**: Filter by friends or visible posts
- **Presence indicators**: Online status for users
- **Typing indicators**: Real-time feedback during comment creation
- **WebSocket upgrade**: For bidirectional features
- **Client-side deduplication**: Ignore stale or duplicate events
- **Metrics & monitoring**: Connection tracking and alerts

26. Engagement metrics: Real profile views & post impressions (PARTIAL - Phase 1 backend counters)
      Phase 1 Implemented (2025-09-26):
          - Added `profileViewsTotal` counter to `User` model (increment-only, non-unique).
          - Added `impressions` counter (default 0) to `Post` model (increment-only, non-unique).
          - New analytics endpoints:
                 POST /analytics/profile-view { profileUserId }
                 POST /analytics/post-impressions { postIds: [] }
                 GET  /analytics/profile/:id/summary
                 GET  /analytics/post/:id/summary
          - Basic validation & auth (re-uses JWT via verifyToken); self profile views skipped.
          - BulkWrite used for impressions to minimize write amplification.
          - No uniqueness / throttling yet (future phases) so high-frequency views will inflate counts; acceptable for Phase 1.
      Remaining (Future Phases):
          Phase 2: Uniqueness handling (per user dedupe windows), session/local Set on client, time-window suppression.
          Phase 3: Viewer list (privacy toggle), post-level unique/impressions breakdown.
          Phase 4: Aggregated summaries & dashboards (top posts, trends, daily rollups, TTL for raw events if added).
          Phase 5: Monitoring hooks & anomaly detection (spikes, bot heuristics).
      Original Goal (still outstanding in part):
          - Accurately track: (a) unique (and total) profile views per user, (b) unique (and total) impressions per post.
          - Optional visibility of recent viewers (privacy-aware) and basic analytics (e.g., top posts by reach).
      Backend Plan (Expanded for future phases):
        1. Data Model Changes:
            - User: replace/rename `viewedProfile` -> `profileViewsTotal` (numeric) and add `profileViewsUnique` (numeric) OR adopt an embedded aggregation doc.
            - Post: keep `impressions` but clarify semantics; add `impressionsUnique` (numeric).
            - New Collections:
                a. `ProfileView` { _id, profileUserId, viewerUserId, ts(Date) }
                b. `PostImpression` { _id, postId, viewerUserId, ts(Date) }
            - (Optional) TTL Index for raw events (e.g., expire after 30–90 days) while keeping aggregated counters on User/Post.
        2. Write Path (Profile View):
            - When frontend loads a profile page (not self), send POST /analytics/profile-view { profileUserId } (token-authenticated).
            - Backend logic:
                 * Ignore if profileUserId === req.user.id.
                 * Upsert (or insert) a lightweight event row (can skip duplicates within a time window by checking for existing viewerUserId+profileUserId where ts > now-6h).
                 * If first event for viewer in window: increment User.profileViewsTotal (+1) and potentially unique count if no previous ANY record exists (lookup by viewerUserId+profileUserId ignoring time window) using an existence check or a separate unique index.
        3. Write Path (Post Impression):
            - Frontend batches visible post IDs (debounced intersection observer) and POST /analytics/post-impressions { postIds: [] }.
            - Backend processes each:
                 * For each postId create event if (no event in last 2 min for same user/post) to avoid scroll jitter inflation.
                 * Always increment Post.impressions (raw total) with $inc.
                 * Only increment Post.impressionsUnique the first time ever for that userId/postId pair.
                 * Consider Mongo bulkWrite for efficiency.
        4. De-duplication / Uniqueness Strategies:
            - Option A (Mongo only): Use findOne for existing event; if none, insert & increment unique.
            - Option B (Cache): Introduce an in-memory or Redis key: `pv:{profileUserId}:{viewerUserId}:{day}` and `pi:{postId}:{viewerUserId}:{hour}` to short-circuit DB writes for repeats.
        5. Privacy & Security:
            - Viewer list (recent 5–10) only if profile owner toggles a setting (future `settings.showViewers`).
            - Do not expose full historical list directly; provide aggregated stats endpoint: /analytics/profile/:id/summary.
        6. Endpoints (proposed):
            - POST /analytics/profile-view
            - POST /analytics/post-impressions
            - GET  /analytics/profile/:id/summary -> { total, unique, recentViewers: [{userId, name, picturePath, ts}] }
            - GET  /analytics/post/:id/summary -> { impressions, unique, lastImpressionTs }
        7. Indexes:
            - ProfileView: index { profileUserId, viewerUserId, ts } (compound), and { profileUserId, ts } for aggregates.
            - PostImpression: index { postId, viewerUserId, ts } and { postId, ts }.
        8. Aggregation / Maintenance Jobs:
            - Nightly job (optional) to rebuild anomaly corrections or roll up daily unique counts for archival.
        9. Migration:
            - For existing data with placeholder values, reset counters to 0 unless preserving seed needed.
     Frontend Plan:
        1. Profile Page:
            - On mount (useEffect) trigger fire-and-forget fetch to POST /analytics/profile-view.
            - Display counters from user object (after refresh) or via lazy GET summary.
            - If viewer list allowed, show avatar chips with tooltip time (format via timeAgo).
        2. Feed & Post Components:
            - Use IntersectionObserver to track when a post crosses a visibility threshold (e.g., 50% viewport for >300ms) and batch postIds.
            - Debounce (e.g., every 1–2s) sending the batch to /analytics/post-impressions.
            - Update local Redux state for the post impression count optimistically (+1 if first local view this session).
        3. Performance:
            - Maintain a Set in memory per session for seenPostIds to avoid redundant network spam.
            - Hard cap per batch (e.g., 50 IDs) and flush on unmount.
        4. UI/UX Considerations:
            - Show compact "Impressions: X" near like/comment row (toggleable via settings).
            - Provide hover tooltip clarifying definition ("Unique viewers vs total views").
        5. Error Handling:
            - Silently ignore analytics endpoint failures (non-critical) but log to console (dev) or send to future monitoring endpoint.
     Edge Cases:
        - Self views excluded.
        - Non-authenticated guests (if later allowed) either ignored or tracked as anonymous bucket.
        - Rapid scroll thrash: mitigated by time window & intersection threshold.
        - Bot/script inflation: future heuristic (rate per user, user-agent filtering).
     Incremental Delivery Strategy:
        Phase 1: Simple counters (POST on mount & visible posts) w/out uniqueness.
        Phase 2: Unique detection & batching.
        Phase 3: Viewer list + privacy toggle.
        Phase 4: Analytics summaries & dashboard.
     Risks & Mitigations:
        - High write volume -> batch & cache.
        - Privacy concerns -> explicit setting to expose viewers.
        - Data bloat -> TTL + aggregation roll-ups.
     Success Criteria:
        - <50ms added latency per batch call (server side).
        - Accurate ±1 against manual test scenarios for uniqueness.
        - No more than 1 analytics request per 2s during normal scroll.

3. Potential Dead / Underutilized Code (Updated)
- Mobile overflow `MoreHorizOutlined` without expanded menu actions.
- GIF/video extraction limited to first occurrence; multiple GIFs ignored.
- Legacy `picturePath` usage paths now duplicative of `mediaPaths` (cleanup later).

4. Security / Resilience Gaps (Unaddressed Features)
- No rate limiting/spam deterrent (client-side throttling).
- No CSRF defense beyond bearer token (acceptable for SPA, note only).
- No remote error logging service; (global error boundary now present but not integrated with monitoring).
- External embed allowances depend on helper; need whitelist review.

5. Quick Win Recommendations (Updated)
D. Replace all alert() calls with unified Snackbar/toast. (B & C done)
E. Add skeleton loaders for posts & comments.
F. Optimistic comment update & rollback pattern.
G. Configurable MAX_MEDIA_FILES via env & enforce on server.
H. Tooltip with edited timestamp for edited comments.
I. Add explicit remove-embed button when auto-detected media is present.
J. (DONE) Introduced global ErrorBoundary; consider granular boundaries & logging (see Feature 19 optional enhancements).
 K. SSE heartbeat & reconnect backoff (convert 18.a & 18.b into short-term actionable items).
 L. Polling fallback for SSE failures (18.d).
 M. Batch/coalesce rapid SSE events (18.g) to reduce render thrash.

Quick Win Status Updates (2025-09-26):
 - A IMPLEMENTED: ARIA labels added to interactive icon buttons; waveform canvas given descriptive aria-label.
 - G IMPLEMENTED: MAX_MEDIA_FILES now configurable via REACT_APP_MAX_MEDIA_FILES (client) and MAX_MEDIA_FILES (server env); server caps media attachments.
 - H IMPLEMENTED: Edited comments show tooltip with last edit relative time; screen reader label updated.
 - I IMPLEMENTED: Remove button overlays for detected video/GIF embeds in composer.
 - K IMPLEMENTED: SSE client now includes heartbeat silence detection, exponential backoff, and reconnection logic.
 - L PARTIAL: Polling fallback (10s interval) activates after repeated SSE failures (attempt >5); future enhancement: adaptive interval & disable when SSE recovers.
 - M IMPLEMENTED: Client batches rapid SSE events with 250ms coalescing window before dispatch.
 - D Not Needed: No native alert() calls found; handled by existing Snackbar patterns.
 - E IMPLEMENTED: Skeleton loaders (3 placeholders) show while fetching initial posts (feed or profile) until data loads.
 - F IMPLEMENTED: Optimistic comment add/edit/delete with rollback on failure (temp IDs, rollback of text or re-insertion on deletion failure).
D. Replace all alert() calls with unified Snackbar/toast. (B & C done)
E. Add skeleton loaders for posts & comments.
F. Optimistic comment update & rollback pattern.
G. Configurable MAX_MEDIA_FILES via env & enforce on server.
H. Tooltip with edited timestamp for edited comments.
I. Add explicit remove-embed button when auto-detected media is present.
J. (DONE) Introduced global ErrorBoundary; consider granular boundaries & logging (see Feature 19 optional enhancements).
 K. SSE heartbeat & reconnect backoff (convert 18.a & 18.b into short-term actionable items).
 L. Polling fallback for SSE failures (18.d).
 M. Batch/coalesce rapid SSE events (18.g) to reduce render thrash.

6. Medium-Term Improvements (Revised)
1. Pagination or infinite scroll & virtualization.
2. Theme toggle control + persisted preference.
3. Centralized embed/media parsing & sanitization service.
4. Dedicated single-post page with SEO-friendly metadata.
5. Comment edit/delete enhancements (history, soft delete, undo).
6. Media carousel/lightbox with swipe & keyboard controls.
7. Upload progress & cancellation.
8. Rate limiting UI & server sync.
9. Config-driven UI/media limits.
10. Enhanced accessibility (focus outlines, skip links, ARIA roles review).
 11. Presence & typing indicators over upgraded real-time channel (18.e / 18.h).
 12. Selective real-time channels & per-user/topic subscriptions (18.c).
 13. Real-time metrics dashboard & monitoring hooks (18.j).

7. Longer-Term Enhancements (Expanded)
1. Real-time updates (WebSocket/SSE) incl. presence & typing.
2. Cloud media storage + CDN + presigned direct uploads.
3. Advanced media processing (thumbnails, transcoding pipeline, waveform snapshot persistence).
4. Offline/PWA (cache strategies, background sync, notifications).
5. Audio normalization & transcoding (multi-codec packaging).
6. CSP & security hardening (iframe sandbox, URL allowlist service).
7. Observability: client perf metrics & error aggregation dashboard.
8. Analytics-driven feed ranking or personalization.
9. Internationalization & localization.
10. Theming presets, user-custom themes & font scaling.

8. No Evidence of Over-Engineering
- Added audio feature is self-contained.
- Mocks in `setupTests.js` are minimal and necessary for environment simulation.
- No excessive abstraction layers introduced.

9. Summary Table (Condensed)
| Area | Status |
|------|--------|
| Share | Non-functional |
| Comment edit/delete | Missing |
| Multi-media posts | Missing |
| GIF in comments display | Partial |
| Location editing | Implemented |
| Theme toggle UI | Implemented |
| Pagination | Missing |
| Real-time updates | Missing |
| Error feedback (like/comment) | Partial |
| Single post deep link | Missing |
| Accessibility polish | Partial |
| Test coverage (core UI) | Low |
| Embed sanitization hardening | Implemented |

10. Next Steps (If You Want Action)
Reply with the letters of items you’d like implemented first (e.g., "A, B, D" for Share, GIF rendering in comments, and object URL cleanup) and I can proceed directly.

-- End of Report --
