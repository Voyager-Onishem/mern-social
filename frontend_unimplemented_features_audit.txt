Frontend Feature Audit - Unimplemented / Non-Functional / Partial Items
=====================================================================

Generated: 2025-09-25
Scope: Entire React client under `client/src`.

1. Implemented (Baseline + New)
- Auth routing with `RequireAuth` for /home and /profile/:userId.
- Post creation: text + media (multi-image/video up to 5) + audio recording (voice message) + GIF URL embedding + external video URL embedding.
- Multi-media persistence via `mediaPaths` with migration fallback (legacy `picturePath`).
- Audio recording (MediaRecorder + waveform) and playback.
- Feed/profile post rendering with like & comment functionality.
- Share action (progressive: Web Share → clipboard → textarea fallback) with Snackbar feedback.
- Comment editing & deletion (inline edit, delete, edited indicator).
- GIF rendering inside comments (first GIF auto displayed as <img>).
- Object URL revocation for media previews.
- Relative time utilities (timeAgo/objectId) and theme switching logic via Redux `mode` (no visible toggle UI).
 - Object URL revocation for media previews.
 - Relative time utilities (timeAgo/objectId) and theme switching logic via Redux `mode` (no visible toggle UI).
 - Snackbar error handling for like/comment/comment edit/delete & like failures (Quick Win B).
 - Simple lightbox modal for images/videos with keyboard nav (Quick Win C).
 - Location & occupation editing via profile dialog (Feature 6).

2. Unimplemented / Non-Functional / Partial Features
1. Share action
   - UI: `ShareOutlined` icon shown per post.
   - No onClick handler, no share dialog/copy link logic. Purely decorative.
2. Comment editing/deletion
   - Cannot edit or delete existing comments. Only append new.
3. Multiple media per post
   - Only one file allowed (image OR video OR audio). No gallery/carousel support.
4. GIF rendering inside comments
   - GIF URLs can be inserted, but comment renderer does not convert them to <img>; likely displayed as plain text.
5. Removing detected embeds
   - Auto video/GIF detection in post text has no explicit UI to remove aside from manually deleting URL.
6. Location editing (DONE)
    - Implemented profile dialog (UserWidget) to update location & occupation; persists to backend and Redux.
7. Profile page depth
   - No avatar/bio edit or explicit friend management actions observed (friend widget code not included in scan).
8. Robust Giphy error/loading states
   - Picker lacks visible loading/error fallback if API key missing or network fails.
9. Accessibility gaps
   - Icon-only buttons (like/share/GIF/audio) lack aria-labels.
   - Waveform canvas lacks accessible alternative.
10. Audio enhancements
    - No pause/resume, trimming, duration metadata display, or re-record confirmation.
11. Feedback on actions (PARTIAL)
    - Snackbar error surfaced for like/comment/add/edit/delete and comment load; remaining: global provider & retry/optimistic patterns.
12. Input validation UX
    - No character count/limit displays; rely on backend acceptance.
13. Shareable deep links
    - No dedicated `/post/:id` route; cannot open a single post in isolation.
14. Draft persistence
    - Abandoning the composer loses text/media; no local storage.
15. Media labeling
    - Audio posts labeled generically ("Voice message"); no duration length surface.
16. Theme toggle UI
    - Theme infrastructure present; no visible toggle control.
17. Friend add/remove
    - Not verified in scanned code; if absent, friend list is read-only.
18. Real-time updates
    - No sockets/polling for incoming posts/likes/comments; manual refresh dependent.
19. Error boundaries
    - No <ErrorBoundary>; iframe/media errors could cascade.
20. Test coverage
    - Core components (MyPostWidget/PostWidget/GiphyPicker/audio controls) untested. Only utility + trivial App test present.
21. Service worker/PWA
    - No offline caching or install prompt despite share icon presence.
22. Embed sanitization
    - Direct iframe/video creation from extracted URLs; limited sanitization -> potential XSS vector if helpers insufficient.
23. Media compatibility
    - Raw WEBM audio may have Safari compatibility issues (no fallback or transcoding).
24. Loading states
    - Minimal ("Loading comments..."). No skeleton loaders.
25. Pagination/infinite scroll
    - Full feed loads in one request; no lazy load or page slicing.

3. Potential Dead / Underutilized Code (Updated)
- Mobile overflow `MoreHorizOutlined` without expanded menu actions.
- GIF/video extraction limited to first occurrence; multiple GIFs ignored.
- Legacy `picturePath` usage paths now duplicative of `mediaPaths` (cleanup later).

4. Security / Resilience Gaps (Unaddressed Features)
- No rate limiting/spam deterrent (client-side throttling).
- No CSRF defense beyond bearer token (acceptable for SPA, note only).
- No rich error logging or central error boundary.
- External embed allowances depend on helper; need whitelist review.

5. Quick Win Recommendations (Updated)
A. Add missing aria-labels + waveform alt description.
D. Replace all alert() calls with unified Snackbar/toast. (B & C done)
E. Add skeleton loaders for posts & comments.
F. Optimistic comment update & rollback pattern.
G. Configurable MAX_MEDIA_FILES via env & enforce on server.
H. Tooltip with edited timestamp for edited comments.
I. Add explicit remove-embed button when auto-detected media is present.
J. Introduce ErrorBoundary component.

6. Medium-Term Improvements (Revised)
1. Pagination or infinite scroll & virtualization.
2. Theme toggle control + persisted preference.
3. Centralized embed/media parsing & sanitization service.
4. Dedicated single-post page with SEO-friendly metadata.
5. Comment edit/delete enhancements (history, soft delete, undo).
6. Media carousel/lightbox with swipe & keyboard controls.
7. Upload progress & cancellation.
8. Rate limiting UI & server sync.
9. Config-driven UI/media limits.
10. Enhanced accessibility (focus outlines, skip links, ARIA roles review).

7. Longer-Term Enhancements (Expanded)
1. Real-time updates (WebSocket/SSE) incl. presence & typing.
2. Cloud media storage + CDN + presigned direct uploads.
3. Advanced media processing (thumbnails, transcoding pipeline, waveform snapshot persistence).
4. Offline/PWA (cache strategies, background sync, notifications).
5. Audio normalization & transcoding (multi-codec packaging).
6. CSP & security hardening (iframe sandbox, URL allowlist service).
7. Observability: client perf metrics & error aggregation dashboard.
8. Analytics-driven feed ranking or personalization.
9. Internationalization & localization.
10. Theming presets, user-custom themes & font scaling.

8. No Evidence of Over-Engineering
- Added audio feature is self-contained.
- Mocks in `setupTests.js` are minimal and necessary for environment simulation.
- No excessive abstraction layers introduced.

9. Summary Table (Condensed)
| Area | Status |
|------|--------|
| Share | Non-functional |
| Comment edit/delete | Missing |
| Multi-media posts | Missing |
| GIF in comments display | Partial |
| Location editing | Implemented |
| Theme toggle UI | Missing |
| Pagination | Missing |
| Real-time updates | Missing |
| Error feedback (like/comment) | Partial |
| Single post deep link | Missing |
| Accessibility polish | Partial |
| Test coverage (core UI) | Low |
| Embed sanitization hardening | Needs review |

10. Next Steps (If You Want Action)
Reply with the letters of items you’d like implemented first (e.g., "A, B, D" for Share, GIF rendering in comments, and object URL cleanup) and I can proceed directly.

-- End of Report --
